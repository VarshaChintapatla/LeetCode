from collections import Counter
class Solution(object):
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l=[]
        c=0
        d=0
        nums.sort()
        c=Counter(nums)

        for i in c:
            l.append(int(i))
        l.sort()
        for i in range(len(l)-1):
            if l[i]>0:
                if l[i+1]-l[i]==1:
                    if c[l[i]]+c[l[i+1]]>d:
                        d=c[l[i]]+c[l[i+1]]
            else:
                if l[i]-l[i+1]==-1:
                    if c[l[i]]+c[l[i+1]]>d:
                        d=c[l[i]]+c[l[i+1]]

        return d



Example 1:

Input: nums = [1,3,2,2,5,2,3,7]

Output: 5

Explanation:

The longest harmonious subsequence is [3,2,2,2,3].

Example 2:

Input: nums = [1,2,3,4]

Output: 2

Explanation:

The longest harmonious subsequences are [1,2], [2,3], and [3,4], all of which have a length of 2.

Example 3:

Input: nums = [1,1,1,1]

Output: 0

Explanation:

No harmonic subsequence exists.

 
